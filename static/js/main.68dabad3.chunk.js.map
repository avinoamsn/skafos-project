{"version":3,"sources":["components/Deck/Card.tsx","recoil.ts","components/Deck/Deck.tsx","components/Search/Dropdown.tsx","components/Search/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PositionedCard","styled","img","distance","StyledCard","tw","Card","src","distanceFromCursor","cardRef","useRef","alt","onMouseMove","e","current","xOffset","nativeEvent","offsetX","yOffset","offsetY","cardHeight","clientHeight","cardWidth","clientWidth","heightCenter","Math","round","widthCenter","rotateXValue","rotateYValue","style","transform","mouseOver","onMouseOut","ref","deckState","atom","key","default","localStorage","deck","JSON","parse","Deck","useRecoilValue","useState","length","cursor","setCursor","useEffect","moveCursor","console","log","max","min","window","addEventListener","removeEventListener","className","map","url","i","StyledButton","button","active","Dropdown","searchText","results","useRecoilState","setDeck","as","show","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Items","static","Item","undefined","slice","card","onClick","newDeck","card_images","image_url","stringify","name","id","Search","endpoint","setSearchText","setResults","didCancel","search","a","fetch","res","json","cards","data","htmlFor","type","placeholder","aria-describedby","onChange","target","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68dabad3.chunk.js","sourcesContent":["import React, { FC, useRef } from 'react'\nimport styled from 'styled-components'\nimport tw from 'tailwind-styled-components'\n\nconst PositionedCard = styled.img<{ distance: number }>`\n\t${({ distance }) =>\n\t\t// push unfocused cards to either side\n\t\tdistance !== 0\n\t\t\t? `left: ${distance * 1 + (distance > 0 ? 25 : -25)}rem;`\n\t\t\t: `left: 0`}\n\t${\n\t\t// invert z-index for cards in the right-hhand pile\n\t\t({ distance }) => (distance > 0 ? `z-index: -${distance}` : ``)\n\t}\n`\nconst StyledCard = tw(PositionedCard)`\n${({ distance }) =>\n\tdistance === 0 ? `-top-6 z-10` : `top-0 pointer-events-none`}\nabsolute rounded-lg transition-all duration-200 ease-in-out\n`\n\n/**\n * An interactive YugHiOh card. Click it to add it to your deck.\n *\n * @note original card mouse-around style logic from: {@link https://codepen.io/richard_w_here/pen/eYmXZMN}\n */\nexport const Card: FC<{ src: string; distanceFromCursor: number }> = ({\n\tsrc,\n\tdistanceFromCursor,\n}) => {\n\tconst cardRef = useRef<HTMLImageElement>(null)\n\n\t// ANCHOR mouse-around styles\n\tconst mouseOut = (): void => {\n\t\tif (cardRef.current === null) return // typesafe check\n\t\tcardRef.current.style.transform = `` // rm hover effect\n\t}\n\tconst mouseOver = (\n\t\te: React.MouseEvent<HTMLImageElement, MouseEvent>\n\t): void => {\n\t\tif (cardRef.current === null) return // typesafe check\n\n\t\t// calculate vars that'll be used to update style\n\t\tconst xOffset = e.nativeEvent.offsetX\n\t\tconst yOffset = e.nativeEvent.offsetY\n\t\tconst cardHeight = cardRef.current.clientHeight\n\t\tconst cardWidth = cardRef.current.clientWidth\n\t\tconst heightCenter = Math.round(cardHeight / 2)\n\t\tconst widthCenter = Math.round(cardWidth / 2)\n\t\tconst rotateBaseValue = 20\n\t\tconst rotateXValue =\n\t\t\t((yOffset - heightCenter) / heightCenter) * rotateBaseValue\n\t\tconst rotateYValue =\n\t\t\t((widthCenter - xOffset) / widthCenter) * rotateBaseValue\n\n\t\t// update the card's style\n\t\tcardRef.current.style.transform = `scale(1.1) rotateX(${rotateXValue}deg) rotateY(${rotateYValue}deg)`\n\t}\n\n\treturn (\n\t\t<StyledCard\n\t\t\tsrc={src}\n\t\t\talt=\"Yu-Gi-Oh card back\"\n\t\t\tonMouseMove={(e) => mouseOver(e)}\n\t\t\tonMouseOut={mouseOut}\n\t\t\tref={cardRef}\n\t\t\tdistance={distanceFromCursor}\n\t\t/>\n\t)\n}\n\nexport default Card\n","import { atom } from 'recoil'\n\nexport const deckState = atom({\n\tkey: `deck`,\n\tdefault: localStorage.deck ? JSON.parse(localStorage.deck) : [],\n})\n","import React, { FC, useEffect, useState } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { Card } from '.'\n\nimport { deckState } from '../../recoil'\n\nexport const Deck: FC = () => {\n\tconst deck = useRecoilValue(deckState)\n\tconst [cursor, setCursor] = useState(deck.length !== 0 ? deck.length - 1 : 0)\n\n\t// listen for arrow presses to move the deck cursor\n\tuseEffect(() => {\n\t\tconst moveCursor = (e: KeyboardEvent): void => {\n\t\t\tconsole.log(`hit!`)\n\t\t\tif (e.key === `ArrowLeft`) setCursor(Math.max(cursor - 1, 0))\n\t\t\tif (e.key === `ArrowRight`)\n\t\t\t\tsetCursor(Math.min(cursor + 1, deck.length - 1))\n\t\t}\n\n\t\twindow.addEventListener(`keydown`, moveCursor)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`keydown`, moveCursor)\n\t\t}\n\t})\n\n\treturn (\n\t\t<section className=\"w-96 h-full relative flex overflow-visible\">\n\t\t\t{deck.map((url: string, i: number) => (\n\t\t\t\t<Card key={url} src={url} distanceFromCursor={i - cursor} />\n\t\t\t))}\n\t\t</section>\n\t)\n}\n\nexport default Deck\n","import React, { FC, Fragment } from 'react'\nimport { useRecoilState } from 'recoil'\nimport tw from 'tailwind-styled-components'\n\nimport { Menu, Transition } from '@headlessui/react'\n\nimport { deckState } from '../../recoil'\n\nconst StyledButton = tw.button<{ active?: boolean }>`\n${({ active }) => (active ? `bg-gray-100 text-gray-900` : `text-gray-700`)}\nw-full text-left block px-4 py-2 text-sm\n`\n\n/**\n * Dropdown that lists matching YuGiOh cards.\n *\n * @note original styles from TailwindUI {@link https://tailwindui.com/components/application-ui/elements/dropdowns}\n */\nexport const Dropdown: FC<{\n\tsearchText: string\n\tresults: any\n}> = ({ searchText, results }) => {\n\tconst [deck, setDeck] = useRecoilState(deckState)\n\n\treturn (\n\t\t<Menu as=\"div\" className=\"absolute inline-block text-left\">\n\t\t\t<Transition\n\t\t\t\tshow={!!searchText.length}\n\t\t\t\tas={Fragment}\n\t\t\t\tenter=\"transition ease-out duration-100\"\n\t\t\t\tenterFrom=\"transform opacity-0 scale-95\"\n\t\t\t\tenterTo=\"transform opacity-100 scale-100\"\n\t\t\t\tleave=\"transition ease-in duration-75\"\n\t\t\t\tleaveFrom=\"transform opacity-100 scale-100\"\n\t\t\t\tleaveTo=\"transform opacity-0 scale-95\"\n\t\t\t>\n\t\t\t\t<Menu.Items\n\t\t\t\t\tstatic\n\t\t\t\t\tclassName=\"origin-top mt-2 w-96 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none\"\n\t\t\t\t>\n\t\t\t\t\t<div className=\"py-1\">\n\t\t\t\t\t\t{results === `loading` ? (\n\t\t\t\t\t\t\t<Menu.Item>\n\t\t\t\t\t\t\t\t<StyledButton active={false}>Loading...</StyledButton>\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t) : results === undefined ? (\n\t\t\t\t\t\t\t<Menu.Item>\n\t\t\t\t\t\t\t\t<StyledButton active={false}>No matches.</StyledButton>\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t) : results.length > 0 ? (\n\t\t\t\t\t\t\tresults\n\t\t\t\t\t\t\t\t.slice(0, 10) // only top 10 results, to make selection easy\n\t\t\t\t\t\t\t\t.map((card: any) => (\n\t\t\t\t\t\t\t\t\t<Menu.Item\n\t\t\t\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tconst newDeck = [...deck, card.card_images[0].image_url]\n\t\t\t\t\t\t\t\t\t\t\tsetDeck(newDeck)\n\t\t\t\t\t\t\t\t\t\t\tlocalStorage.deck = JSON.stringify(newDeck)\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{({ active }) => (\n\t\t\t\t\t\t\t\t\t\t\t<StyledButton active={active}>{card.name}</StyledButton>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</div>\n\t\t\t\t</Menu.Items>\n\t\t\t</Transition>\n\t\t</Menu>\n\t)\n}\n\nexport default Dropdown\n","import React, { FC, useEffect, useState } from 'react'\n\nimport { Dropdown } from './'\n\n/**\n * Search box to search for desired YuGiHo cards.\n *\n * @note original styles from TailwindUI {@link https://tailwindui.com/components/application-ui/forms/input-groups}\n */\nexport const Search: FC = () => {\n\tconst endpoint = `https://db.ygoprodeck.com/api/v7/cardinfo.php`\n\n\tconst [searchText, setSearchText] = useState(``)\n\tconst [results, setResults] = useState({})\n\n\tuseEffect(() => {\n\t\tlet didCancel = false // avoid race conditions\n\n\t\tconst search = async (): Promise<void> => {\n\t\t\tconst res = await fetch(`${endpoint}?fname=${searchText}`)\n\t\t\tconst cards = await res.json()\n\t\t\tif (!didCancel) setResults(cards.data)\n\t\t}\n\n\t\t// avoid searching short strings\n\t\tif (searchText.length > 2) {\n\t\t\tsetResults(`loading`) // used as a quick-n-dirty loading state\n\t\t\tsearch()\n\t\t}\n\n\t\treturn () => {\n\t\t\tdidCancel = true\n\t\t}\n\t}, [endpoint, searchText])\n\n\treturn (\n\t\t<div className=\"w-96\">\n\t\t\t<label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n\t\t\t\tCard name\n\t\t\t</label>\n\n\t\t\t<div className=\"mt-1\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"name\"\n\t\t\t\t\tid=\"name\"\n\t\t\t\t\tclassName=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n\t\t\t\t\tplaceholder=\"Tornado Dragon\"\n\t\t\t\t\taria-describedby=\"name-description\"\n\t\t\t\t\tonChange={(e) => setSearchText(e.target.value)}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<Dropdown searchText={searchText} results={results} />\n\n\t\t\t<p className=\"mt-2 text-sm text-gray-500\" id=\"name-description\">\n\t\t\t\tFuzzy search by card name.\n\t\t\t</p>\n\n\t\t\t<p className=\"mt-2 text-sm text-gray-500\" id=\"name-description\">\n\t\t\t\tUse arrow keys to scroll thru selected cards. Hover to inspect selected\n\t\t\t\tcard more closely.\n\t\t\t</p>\n\t\t</div>\n\t)\n}\n\nexport default Search\n","import React, { FC } from 'react'\nimport { RecoilRoot } from 'recoil'\n\nimport { Deck, Search } from './components'\n\n/**\n * @note all components are exported both as a named & default export for flexibility's sake, and to make it easy for use with barrel files\n */\nexport const App: FC = () => {\n\treturn (\n\t\t<RecoilRoot>\n\t\t\t<div className=\"h-screen grid grid-cols-1 grid-rows-4 place-items-center\">\n\t\t\t\t<Search />\n\t\t\t\t<Deck />\n\t\t\t</div>\n\t\t</RecoilRoot>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport(`web-vitals`).then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(`root`)\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}